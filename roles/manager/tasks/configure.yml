---
# This playbook configures the services

##########################
# Firewall Configuration #
##########################

- name: Configure Firewall
  block:
    - name: Start firewalld service
      systemd:
        name: firewalld
        state: started

    - name: Set default zone to "public" only if necessary
      command: firewall-cmd --set-default-zone=public
      ignore_errors: true
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Remove SSH from public zone
      command: firewall-cmd --zone=public --remove-service=ssh --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Allow Docker Swarm management port (2377/tcp) on trusted zone
      command: firewall-cmd --zone=trusted --add-port=2377/tcp --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Allow Docker Swarm node communication ports (7946/tcp+udp) on trusted zone
      shell: |
        firewall-cmd --zone=trusted --add-port=7946/tcp --permanent
        firewall-cmd --zone=trusted --add-port=7946/udp --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Allow Docker Swarm overlay network traffic port (4789/udp) on trusted zone
      command: firewall-cmd --zone=trusted --add-port=4789/udp --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Block all incoming traffic by default, allowing established connections out
      command: firewall-cmd --zone=public --set-target=DROP --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Allow trusted zone to accept traffic from Tailscale
      command: firewall-cmd --zone=trusted --add-interface=tailscale0 --permanent
      args:
        creates: /var/lib/ansible/firewall_configured

    - name: Reload firewalld configuration
      shell: |
        firewall-cmd --reload
        touch /var/lib/ansible/firewall_configured
      args:
        creates: /var/lib/ansible/firewall_configured
  tags: firewalld-config

########################
# Docker Configuration #
########################

- name: Configure Docker
  block:
    - name: Start Docker Engine
      systemd:
        name: docker
        state: started
    - name: Initialize Docker Swarm Manager
      shell: |
        docker swarm init \
          {% if manager_docker.advertise_addr != '' %}--advertise-addr {{ manager_docker.advertise_addr }}{% endif %} \
          --default-addr-pool 30.0.0.0/8 \
          --default-addr-pool 40.0.0.0/8 \
          --default-addr-pool-mask-length 16;
        touch /var/lib/ansible/docker_swarm_configured
      args:
        creates: /var/lib/ansible/docker_swarm_configured
  tags: docker-config

###########################
# Portainer Configuration #
###########################

- name: Check Portainer Deployment
  shell: docker stack ls --format {% raw %}"{{.Name}}"{% endraw %} | grep -w portainer
  register: portainer_deployed
  ignore_errors: yes
  changed_when: false

- name: Configure Portainer
  block:
    - name: Create Portainer Stack
      copy:
        content: |
          version: '3.2'

          services:
            agent:
              image: portainer/agent:lts
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
                - /var/lib/docker/volumes:/var/lib/docker/volumes
              networks:
                - agent_network
              deploy:
                mode: global
                placement:
                  constraints: [node.platform.os == linux]

            portainer:
              image: portainer/portainer-ce:lts
              command: -H tcp://tasks.agent:9001 --tlsskipverify
              {% if manager_docker.cloudflare_tunnel_token == '' %}
              ports:
                - "9443:9443"
                - "9000:9000"
                - "8000:8000"
              {% endif %}
              volumes:
                - portainer_data:/data
              networks:
                - agent_network
              deploy:
                mode: replicated
                replicas: 1
                placement:
                  constraints: [node.role == manager]

            {% if manager_docker.cloudflare_tunnel_token != '' %}
            cloudflared:
              image: cloudflare/cloudflared:latest
              environment:
                - CLOUDFLARE_TUNNEL_TOKEN={{ manager_docker.cloudflare_tunnel_token }}
              entrypoint: |
                cloudflared tunnel run --token $CLOUDFLARE_TUNNEL_TOKEN
              networks:
                - agent_network
              deploy:
                placement:
                  constraints: [node.role == manager]
            {% endif %}

          networks:
            agent_network:
              driver: overlay
              attachable: true

          volumes:
            portainer_data:
        dest: /tmp/portainer-agent-stack.yml
        mode: 0644
        owner: root
        group: root

    - name: Deploy Portainer
      shell: |
        docker stack deploy -c /tmp/portainer-agent-stack.yml portainer
        touch /var/lib/ansible/portainer_configured
      args:
        creates: /var/lib/ansible/portainer_configured
  when: portainer_deployed.rc != 0
  tags: portainer-config