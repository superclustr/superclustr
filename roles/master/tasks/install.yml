---
# This playbook installs all necessary packages

##########################
# Tailscale Installation #
##########################

- name: Install Tailscale
  shell: |
    curl -fsSL https://tailscale.com/install.sh | sh
  args:
    creates: /usr/bin/tailscale
  tags: tailscale-install

#########################
# Firewall Installation #
#########################

- name: Install Firewalld packages
  dnf:
    name: firewalld
    state: present
  tags: firewalld-install

###########################
# Kubernetes Installation #
###########################

- name: Install Kubernetes packages
  dnf:
    name: "{{ kubernetes_packages | reject('eq', '') }}"
    install_weak_deps: false
  tags: kubernetes-install

- name: Install Kubernetes (k3s)
  block:
    - name: Download k3s installation script
      get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: Install k3s server
      environment:
        INSTALL_K3S_EXEC: >-
          server
          --flannel-backend none
          --disable-network-policy
          --write-kubeconfig-mode "0644"
      shell: /tmp/k3s-install.sh
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for k3s to be ready
      wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        state: present
        delay: 5
        timeout: 300
  tags: kubernetes-install

#####################
# Helm Installation #
#####################

- name: Install Helm
  shell: |
    export PATH=$PATH:/usr/local/bin
    curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    creates: /usr/local/bin/helm
  tags: helm-install

#######################
# Cilium Installation #
#######################

- name: Install Cilium
  block:
    - name: Add Cilium helm repo
      command: helm repo add cilium https://helm.cilium.io/
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install Cilium
      shell: |
        helm install cilium cilium/cilium --namespace kube-system \
          --set ipam.operator.clusterPoolIPv4PodCIDRList="10.42.0.0/16" \
          --set operator.replicas=1 \
          --set hubble.enabled=false \
          --set clustermesh.enabled=false
        touch /var/lib/ansible/cilium_installed
      args:
        creates: /var/lib/ansible/cilium_installed
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install Cilium CLI
      shell: |
        cd /tmp
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt) && \
        CLI_ARCH=amd64 && \
        if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi && \
        curl -L --fail --remote-name-all "https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz"{,.sha256sum} && \
        sha256sum --check "cilium-linux-${CLI_ARCH}.tar.gz.sha256sum" && \
        tar xzvfC "cilium-linux-${CLI_ARCH}.tar.gz" /usr/local/bin && \
        rm -f "cilium-linux-${CLI_ARCH}.tar.gz"{,.sha256sum}
        touch /var/lib/ansible/cilium_cli_installed
      args:
        creates: /var/lib/ansible/cilium_cli_installed
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      
    - name: Wait for Cilium to be ready
      command: cilium status --wait
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      
  tags: cilium-install

#######################
# ArgoCD Installation #
#######################

- name: Install ArgoCD
  block:
    - name: Add ArgoCD helm repo
      command: helm repo add argo https://argoproj.github.io/argo-helm
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Create argocd namespace
      shell: |
        kubectl create namespace argocd
        touch /var/lib/ansible/argocd_namespace_created
      args:
        creates: /var/lib/ansible/argocd_namespace_created
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install ArgoCD
      shell: |
        helm install argocd argo/argo-cd --namespace argocd
        touch /var/lib/ansible/argocd_installed
      args:
        creates: /var/lib/ansible/argocd_installed
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  tags: argocd-install

########################
# MetalLB Installation #
########################

- name: Install MetalLB
  block:
    - name: Add MetalLB helm repo
      command: helm repo add metallb https://metallb.github.io/metallb
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Create metallb-system namespace
      shell: |
        kubectl create namespace metallb-system
        touch /var/lib/ansible/metallb_namespace_created
      args:
        creates: /var/lib/ansible/metallb_namespace_created
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install MetalLB
      shell: |
        helm install metallb metallb/metallb --namespace metallb-system
        touch /var/lib/ansible/metallb_installed
      args:
        creates: /var/lib/ansible/metallb_installed
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  tags: metallb-install

#############################
# Cert-Manager Installation #
#############################

- name: Install Cert-Manager
  block:
    - name: Add Jetstack Helm repo
      command: helm repo add jetstack https://charts.jetstack.io
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Create cert-manager namespace
      shell: |
        kubectl create namespace cert-manager
        touch /var/lib/ansible/cert_manager_namespace_created
      args:
        creates: /var/lib/ansible/cert_manager_namespace_created
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install Cert-Manager
      shell: |
        helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.14.1 --set installCRDs=true
        touch /var/lib/ansible/cert_manager_installed
      args:
        creates: /var/lib/ansible/cert_manager_installed
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  tags: certmanager-install
