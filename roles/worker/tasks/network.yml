---
# This playbook configures the network

###########################
# Interface Configuration #
###########################

- name: Configure network interface
  copy:
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ worker_network.device }}"
    content: |
      #ANSIBLE-BEGIN
      # The contents below are automatically generated by Ansible. Do not modify.
      DEVICE={{ worker_network.device }}
      ONBOOT=yes
      TYPE=Ethernet

      # DNS Configuration
      {% if worker_network.ip_address %}
      DNS1=8.8.8.8
      DNS2=8.8.4.4
      {% endif %}
      {% if worker_network.ip_v6_address %}
      DNS3=2001:4860:4860::8888
      DNS4=2001:4860:4860::8844
      {% endif %}

      # IPv4 Configuration
      {% if worker_network.ip_address and worker_network.ip_address != 'dhcp' %}
      IPADDR={{ worker_network.ip_address }}
      NETMASK={{ worker_network.ip_netmask }}
      GATEWAY={{ worker_network.ip_gateway }}
      BOOTPROTO=static
      {% elif worker_network.ip_address == 'dhcp' %}
      BOOTPROTO=dhcp
      {% else %}
      BOOTPROTO=none
      IPV4_FAILURE_FATAL=no
      {% endif %}

      # IPv6 Configuration
      {% if worker_network.ip_v6_address and worker_network.ip_v6_address != 'dhcp' %}
      IPV6ADDR={{ worker_network.ip_v6_address }}
      IPV6_DEFAULTGW={{ worker_network.ip_v6_gateway }}
      IPV6_AUTOCONF=no
      IPV6INIT=yes
      {% elif worker_network.ip_v6_address == 'dhcp' %}
      IPV6_AUTOCONF=yes
      {% else %}
      IPV6INIT=no
      {% endif %}
      #ANSIBLE-END
  when: worker_network.device != ""
  tags: interface-network

- name: Apply network changes
  shell: |
    nmcli device reapply {{ worker_network.device }}
    systemctl restart NetworkManager
  when: worker_network.device != ""
  tags: interface-network

###########################
# Hostname Configuration #
###########################

- name: Apply hostname
  hostname:
    name: "{{ worker_network.hostname }}"
  when: worker_network.hostname != ""
  tags: hostname-network
